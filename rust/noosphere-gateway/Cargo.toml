[package]
name = "noosphere-gateway"
version = "0.10.0"
edition = "2021"
description = "A geist on the network that enables user spheres to discover each other"
keywords = ["http", "geist", "noosphere", "p2p", "ucan"]
categories = [
  "network-programming",
  "asynchronous",
]
rust-version = "1.60.0"
license = "MIT OR Apache-2.0"
documentation = "https://docs.rs/noosphere-gateway"
repository = "https://github.com/subconsciousnetwork/noosphere"
homepage = "https://github.com/subconsciousnetwork/noosphere"
readme = "README.md"

[dependencies]
tracing = { workspace = true }

[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
reqwest = { workspace = true }
noosphere-common = { version = "0.1.0", path = "../noosphere-common", features = ["helpers"] }
noosphere-core = { version = "0.17.0", path = "../noosphere-core", features = ["helpers"] }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
anyhow = { workspace = true }
axum = { workspace = true, features = ["headers", "macros"] }
iroh-car = { workspace = true }
thiserror = { workspace = true }
strum = { workspace = true }
strum_macros = { workspace = true }
bytes = { workspace = true }

tokio = { workspace = true, features = ["full"] }
tokio-stream = { workspace = true }
tower = { workspace = true }
tower-http = { workspace = true, features = ["cors", "trace"] }
async-trait = "~0.1"
async-stream = { workspace = true }
deterministic-bloom = { workspace = true }

url = { workspace = true, features = ["serde"] }
mime_guess = "^2"

noosphere-ipfs = { version = "0.8.1", path = "../noosphere-ipfs" }
noosphere-core = { version = "0.17.0", path = "../noosphere-core" }
noosphere-ns = { version = "0.11.1", path = "../noosphere-ns" }
noosphere-storage = { version = "0.9.0", path = "../noosphere-storage" }
ucan = { workspace = true }
ucan-key-support = { workspace = true }
cid = { workspace = true }

serde = { workspace = true }
serde_json = { workspace = true }
libipld-core = { workspace = true }
libipld-cbor = { workspace = true }

[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen = { workspace = true }

