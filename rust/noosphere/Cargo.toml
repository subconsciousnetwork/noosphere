[package]
name = "noosphere"
version = "0.11.0"
edition = "2021"
description = "A high-level package for dealing with accessing the Noosphere"
keywords = ["noosphere"]
categories = ["filesystem"]
rust-version = "1.60.0"
license = "MIT OR Apache-2.0"
documentation = "https://docs.rs/noosphere"
repository = "https://github.com/subconsciousnetwork/noosphere"
homepage = "https://github.com/subconsciousnetwork/noosphere"
readme = "README.md"

[lib]
crate-type = ["rlib", "staticlib", "cdylib"]

[features]
default = []
headers = ["safer-ffi/headers"]
ipfs-storage = ["noosphere-ipfs"]

[dependencies]
anyhow = "^1"
thiserror = { workspace = true }
lazy_static = "^1"
cid = { workspace = true }
async-trait = "~0.1"
async-stream = "~0.3"
tracing = { workspace = true }
url = { version = "^2", features = ["serde"] }
subtext = { workspace = true }
itertools = "0.10.5"
tokio-stream = "~0.1"
tokio-util = { version = "~0.7", features = ["io"] }
libipld-core = { workspace = true }
libipld-cbor = { workspace = true }
bytes = "^1"

noosphere-core = { version = "0.12.0", path = "../noosphere-core" }
noosphere-sphere = { version = "0.5.4", path = "../noosphere-sphere" }
noosphere-storage = { version = "0.6.4", path = "../noosphere-storage" }
noosphere-api = { version = "0.7.9", path = "../noosphere-api" }
noosphere-ipfs = { version = "0.4.4", path = "../noosphere-ipfs", optional = true }
ucan = { workspace = true }
ucan-key-support = { workspace = true }

[dev-dependencies]
libipld-core = { workspace = true }

[target.'cfg(target_arch = "wasm32")'.dependencies]
# TODO: We should eventually support gateway storage as a specialty target only,
# as it is a specialty use-case
tokio = { version = "^1", features = ["sync"] }
rexie = { version = "~0.4" }
wasm-bindgen = "~0.2"
wasm-bindgen-futures = "0.4.33"
js-sys = "~0.3"
noosphere-into = { version = "0.8.4", path = "../noosphere-into" }

[target.'cfg(target_arch = "wasm32")'.dependencies.web-sys]
version = "~0.3"
features = [
  "CryptoKey",
]

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
safer-ffi = { version = "0.1.0-rc1", features = ["proc_macros"] }
tokio = { version = "^1", features = ["full"] }

[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
tempfile = "^3"

[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
wasm-bindgen-test = "~0.3"
witty-phrase-generator = "~0.2"
instant = { workspace = true, features = ["wasm-bindgen", "stdweb"] }
gloo-timers = { workspace = true }
