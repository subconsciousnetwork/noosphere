on:
  push:
    branches:
      - main

name: 'Perform a release'

jobs:
  # NOTE: This step is stateful. When there are unreleased changes on main, it
  # generates a candidate PR for the next release based on all the unreleased
  # changes and their implications for the versions of our packages. If such a
  # PR already exists, it will detect it and update in place. These PRs are
  # intended to stick around and update until a release is ready to be made.
  # Once merged, this step will detect the merge and generate Git tags and
  # corresponding Github releases for each package being released. Only at that
  # time will the rest of the steps in this workflow run.
  release-please:
    name: 'Prepare a release'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.repository_owner == 'subconsciousnetwork'
    outputs:
      noosphere_cli_released: ${{ steps.release.outputs['rust/noosphere-cli--release_created'] }}
      noosphere_cli_release_tag_name: ${{ steps.release.outputs['rust/noosphere-cli--tag_name'] }}
      noosphere_released: ${{ steps.release.outputs['rust/noosphere--release_created'] }}
      noosphere_release_tag_name: ${{ steps.release.outputs['rust/noosphere--tag_name'] }}
    steps:
      - uses: chainguard-dev/actions/setup-gitsign@main
      - name: 'Run release-please'
        id: release
        uses: cdata/release-please-action@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          default-branch: main
          command: manifest
          release-type: rust
          extra-files: |
            Cargo.toml

  noosphere-cli-build:
    needs: ['release-please']
    if: ${{ needs['release-please'].outputs.noosphere_cli_released }}
    uses: ./.github/workflows/noosphere_cli_build.yaml

  noosphere-cli-release-artifacts:
    name: 'Add Noosphere CLI artifacts to release'
    needs: ['release-please', 'noosphere-cli-build']
    runs-on: ubuntu-latest
    steps:
      - name: 'Download build artifacts'
        uses: actions/download-artifact@v3

      - name: 'Generate checksums'
        run: for file in orb-*/orb-*; do openssl dgst -sha256 -r "$file" | awk '{print $1}' > "${file}.sha256"; done

      # NOTE: The release has to be published before adding build artifacts,
      # otherwise the upload causes a different release to be made (???)
      - name: 'Publish release'
        run: gh release edit ${{ needs['release-please'].outputs.noosphere_cli_release_tag_name }} --draft=false --repo=subconsciousnetwork/noosphere
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Add build artifacts to release'
        uses: softprops/action-gh-release@v1
        with:
          files: orb-*/orb-*
          tag_name: ${{ needs['release-please'].outputs.noosphere_cli_release_tag_name }}

  noosphere-apple-build:
    name: 'Build Noosphere artifacts (Apple)'
    needs: ['release-please']
    if: ${{ needs['release-please'].outputs.noosphere_released }}
    uses: ./.github/workflows/noosphere_apple_build.yaml

  noosphere-release-artifacts:
    name: 'Add Noosphere artifacts to release'
    needs: ['release-please', 'noosphere-apple-build']
    runs-on: ubuntu-latest
    steps:
      - name: 'Download XCode Framework artifact'
        uses: actions/download-artifact@v3
        with:
          name: libnoosphere_apple_framework

      - name: 'Generate checksum'
        run: openssl dgst -sha256 ./libnoosphere.zip > ./CHECKSUM

      # NOTE: The release has to be published before adding build artifacts,
      # otherwise the upload causes a different release to be made (???)
      - name: 'Publish release'
        run: gh release edit ${{ needs['release-please'].outputs.noosphere_release_tag_name }} --draft=false --repo=subconsciousnetwork/noosphere
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Add build artifacts to release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            libnoosphere.zip
            CHECKSUM
          tag_name: ${{ needs['release-please'].outputs.noosphere_release_tag_name }}

  # Publishes crates to crates.io in dependency order. This command is
  # idempotent and won't re-publish crates that are already published, so it's
  # safe for us to run it indiscriminately
  publish-crates:
    name: 'Publish to crates.io'
    needs:
      [
        'release-please',
        'noosphere-cli-release-artifacts',
        'noosphere-release-artifacts',
      ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          toolchain: stable
      - name: 'Install cargo-workspaces'
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --force cargo-workspaces
      - name: 'Publish crates'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: cargo workspaces publish --from-git
