on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:

name: Run test suite

jobs:
  build-noosphere-apple-artifacts:
    name: 'Build Noosphere artifacts (Apple)'
    uses: ./.github/workflows/noosphere_apple_build.yaml
    with:
      for-test: true

  run-test-suite-mac-os-swift:
    runs-on: macos-12
    needs: ['build-noosphere-apple-artifacts']
    steps:
      - uses: actions/checkout@v2
      - name: 'Download XCode Framework artifact'
        uses: actions/download-artifact@v3
        with:
          name: libnoosphere_apple_framework

      - name: 'Run Swift tests'
        run: |
          unzip ./libnoosphere-apple-xcframework.zip

          sed -i '' -e "s#url: \"[^\"]*\",#path: \"./LibNoosphere.xcframework\"),#" ./Package.swift
          sed -i '' -e "s#checksum: \"[^\"]*\"),##" ./Package.swift

          swift build
          swift test

  run-test-suite-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          toolchain: stable
      - name: 'Install environment packages'
        run: |
          choco install -y cmake protoc openssl
        shell: sh
      - name: 'Install IPFS Kubo'
        uses: ibnesayeed/setup-ipfs@master
        with:
          ipfs_version: v0.17.0
          run_daemon: true
      - name: 'Run Rust native target tests'
        uses: actions-rs/cargo@v1.0.3
        with:
          command: test
          args: --features test_kubo

  run-linting-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          components: rustfmt, clippy
          toolchain: stable
      - name: 'Install environment packages'
        run: |
          sudo apt-get update -qqy
          sudo apt-get install jq protobuf-compiler cmake
      - name: 'Check Format'
        uses: actions-rs/cargo@v1
        with:
          args: --all -- --check
          command: fmt
          toolchain: stable
      - name: 'Run Linter'
        uses: actions-rs/cargo@v1
        with:
          args: --all -- -D warnings
          command: clippy 
          toolchain: stable

  run-test-suite-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          toolchain: stable
      - name: 'Install environment packages'
        run: |
          sudo apt-get update -qqy
          sudo apt-get install jq protobuf-compiler cmake
      - name: 'Install IPFS Kubo'
        uses: ibnesayeed/setup-ipfs@master
        with:
          ipfs_version: v0.17.0
          run_daemon: true
      - name: 'Run Rust native target tests'
        uses: actions-rs/cargo@v1.0.3
        with:
          command: test
          args: --features test_kubo,headers
  run-test-suite-linux-c:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          toolchain: stable
      - name: 'Install environment packages'
        run: |
          sudo apt-get update -qqy
          sudo apt-get install jq protobuf-compiler cmake make
      - name: 'Link Noosphere from C'
        run: |
          make build -C ./c/example
      - name: 'Run C integration tests'
        run: |
          make run -C ./c/example
  run-test-suite-web-wasm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          toolchain: stable
      - name: 'Install environment packages'
        run: |
          sudo apt-get update -qqy
          sudo apt-get install jq protobuf-compiler cmake
      - name: 'Install Rust/WASM test dependencies'
        run: |
          rustup target install wasm32-unknown-unknown
          cargo install toml-cli
          WASM_BINDGEN_VERSION=`toml get ./Cargo.lock . | jq '.package | map(select(.name == "wasm-bindgen"))[0].version' | xargs echo`
          cargo install wasm-bindgen-cli --vers "$WASM_BINDGEN_VERSION"
        shell: bash
      # See: https://github.com/SeleniumHQ/selenium/blob/5d108f9a679634af0bbc387e7e3811bc1565912b/.github/actions/setup-chrome/action.yml
      - name: 'Setup Chrome and chromedriver'
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee -a /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update -qqy
          sudo apt-get -qqy install google-chrome-stable
          CHROME_VERSION=$(google-chrome-stable --version)
          CHROME_FULL_VERSION=${CHROME_VERSION%%.*}
          CHROME_MAJOR_VERSION=${CHROME_FULL_VERSION//[!0-9]}
          sudo rm /etc/apt/sources.list.d/google-chrome.list
          export CHROMEDRIVER_VERSION=`curl -s https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MAJOR_VERSION%%.*}`
          curl -L -O "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
          unzip chromedriver_linux64.zip && chmod +x chromedriver && sudo mv chromedriver /usr/local/bin
          chromedriver -version
        shell: bash
      - name: 'Run Rust headless browser tests'
        working-directory: ./rust
        run: CHROMEDRIVER=/usr/local/bin/chromedriver cargo test --target wasm32-unknown-unknown
        shell: bash

  run-test-suite-web-typescript:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v2
      # Disable wireit cache for now, seeing some errors pop up:
      # https://github.com/subconsciousnetwork/noosphere/actions/runs/4682179827/jobs/8295693844
      # - uses: google/wireit@setup-github-actions-caching/v1
      - uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          toolchain: stable
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
      - name: 'Install environment packages'
        run: |
          sudo apt-get update -qqy
          sudo apt-get install jq protobuf-compiler cmake
      - name: 'Install Rust/WASM test dependencies'
        run: |
          rustup target install wasm32-unknown-unknown
          cargo install toml-cli
          WASM_BINDGEN_VERSION=`toml get ./Cargo.lock . | jq '.package | map(select(.name == "wasm-bindgen"))[0].version' | xargs echo`
          cargo install wasm-bindgen-cli --vers "$WASM_BINDGEN_VERSION"
          cargo install wasm-opt --locked
        shell: bash
      # See: https://github.com/SeleniumHQ/selenium/blob/5d108f9a679634af0bbc387e7e3811bc1565912b/.github/actions/setup-chrome/action.yml
      - name: 'Setup Chrome and chromedriver'
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee -a /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update -qqy
          sudo apt-get -qqy install google-chrome-stable
          CHROME_VERSION=$(google-chrome-stable --version)
          CHROME_FULL_VERSION=${CHROME_VERSION%%.*}
          CHROME_MAJOR_VERSION=${CHROME_FULL_VERSION//[!0-9]}
          sudo rm /etc/apt/sources.list.d/google-chrome.list
          export CHROMEDRIVER_VERSION=`curl -s https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MAJOR_VERSION%%.*}`
          curl -L -O "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
          unzip chromedriver_linux64.zip && chmod +x chromedriver && sudo mv chromedriver /usr/local/bin
          chromedriver -version
        shell: bash
      - name: 'Install NPM dependencies'
        working-directory: ./typescript
        run: npm ci
      - name: 'Run TypeScript headless browser tests'
        working-directory: ./typescript
        run: npm run test
